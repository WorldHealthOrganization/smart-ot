map "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesLogicalModelToResources" = "MeaslesLogicalModelToResources"


uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesReportingSource" alias SOTMeaslesReportingSource as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesDemographic" alias SOTMeaslesDemographic as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesVaccinationStatus" alias SOTMeaslesVaccinationStatus as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesClinical" alias SOTMeaslesClinical as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesLaboratoryResults" alias SOTMeaslesLaboratoryResults as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesContactTracing" alias SOTMeaslesContactTracing as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesEpiData" alias SOTMeaslesEpiData as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesClassification" alias SOTMeaslesClassification as source


uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias SOTMeasles as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias MeaslesCIFBundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias MeaslesCIFComposition as target




imports "http://worldhealthorganization.github.io/smart-ot/StructureMap/MetaDataTypesHelper"


group MeaslesLogicalModelToResources(source lm : SOTMeasles, target bundle : Bundle) {
  lm -> bundle.type = 'document' "setBundleType";
  /* lm.ReportingSource as reportingSource then {
    reportingSource.DateReportedNational as date -> bundle.timestamp = date "setDate";
  } "setTimestamp"; */
  
  lm -> uuid() as bid, bundle.id = bid "setId";
  lm -> uuid() as cid, uuid() as pid, uuid() as prid, uuid() as oid, uuid() as eid  then {  
    lm -> bundle.entry as entry,  entry.resource = create('Composition') as composition,  entry.fullUrl = append('urn:uuid:', cid) then {
    lm -> lm then LmToComposition(lm, composition,  cid,  pid,  prid,  oid,  eid ) "set";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', pid), create('Patient') as patient then {
    lm.Demographics as demographics -> demographics then DemographicsToPatient(demographics, patient, pid) "createPatient";
    lm -> entry.resource = patient "setPatientAsEntry";
    } "mapPatientResource";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', prid), create('Practitioner') as practitioner then {
    lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToPractitioner(reportingSource, practitioner, prid) "createPractitioner";
    lm -> entry.resource = practitioner "setPractitionerAsEntry";
    } "mapPractitionerResource" ;
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', oid), create('Organization') as organization then {
    lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToOrganization(reportingSource, organization, oid) "createOrganization";
    lm -> entry.resource = organization "setOrganizationAsEntry";
    } "mapOrganizationResource";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', eid), create('Encounter') as encounter then {
    lm.ReportingSource as reportingSource then {
      reportingSource.DateOfConsultation as date then {
        date -> create('Coding') as type, type.code = "AMB", type.system = "http://terminology.hl7.org/CodeSystem/v3-ActCode", type.display = "ambulatory" then createCompositionEncounterResource(date,pid, type, eid,  encounter) "createEncounter";
      } "setEncounter";
      reportingSource.DateOfHomeVisit as date then {
        date -> create('Coding') as type, type.code = "HH", type.system = "http://terminology.hl7.org/CodeSystem/v3-ActCode", type.display = "home health" then createCompositionEncounterResource(date,pid, type, eid,  encounter) "createEncounter";
      } "setEncounter";
    } "setEncounter"; 
    lm -> entry.resource = encounter "setEncounterAsEntry"; 
    } "mapEncounterResource";
    lm -> lm then mapClinicalToObservations (lm, bundle, composition, pid) "setClinicalData";
    lm -> lm then mapLabsToDiagnosticReport (lm, bundle, composition, pid) "setLabsData";
    lm -> lm then mapVaccinationStatusToImmunization (lm, bundle, composition, pid) "setImmunizationData";
    lm -> lm then mapClassificationToConditions (lm, bundle, composition, pid,eid) "setClassification";
  } "mapCompositionResource";
  } "setEntries" ;
}

group mapClassificationToConditions (source lm : SOTMeasles, target bundle: Bundle, target composition: MeaslesCIFComposition, source pid, source eid) {
  lm -> composition.section as section, section.title = "Classification" then {
    lm.Classification as classification -> uuid() as id, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', id), section.entry as sectionEntry, sectionEntry.reference = append('Condition/', id), entry.resource = create('Condition') as condition then {
      classification -> condition.id = id "setId";
      classification -> condition.verificationStatus as tgtStatus, create('Coding') as status, status.code = "confirmed", status.system = "http://terminology.hl7.org/CodeSystem/condition-ver-status", status.display = "Confirmed" then mapCodingtoCodeableConcept(status, tgtStatus) "set";
      classification -> condition.subject as subject, subject.reference = append('Patient/',pid) "setSubject";
      classification.FinalClassification as coding -> condition.code as code then mapCodingtoCodeableConcept( coding, code) "setCode";
      classification -> condition.encounter as encounter, encounter.reference = append('Encounter/',eid) "setSubject";
      classification -> condition.category as tgt, create('Coding') as status, status.code = "encounter-diagnosis", status.system = "http://terminology.hl7.org/CodeSystem/condition-category", status.display = "Encounter Diagnosis" then mapCodingtoCodeableConcept(status, tgt) "set"; 
      classification.ClassificationDate as date -> condition.recordedDate = date "set";
      classification.ClassifiedBy as person ->  uuid() as rpid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', rpid), section.entry as sectionEntry, sectionEntry.reference = append('RelatedPerson/', rpid), entry.resource = create('RelatedPerson') as recorder then {
        person -> recorder.id = rpid "setId";
        person -> recorder.name as targetName, create('HumanName') as name, name.text = person then humanNameToHumanName(name, targetName ) "set";
        person -> recorder.patient as patient, patient.reference = append('Patient/',pid) "setPatient";
      } "setPerson";
     // classification.ConfirmationBasis as basis -> condition
    } "SetClassification";
  } "setSection";
}
group mapContactTracing(source lm : SOTMeasles, target bundle: Bundle, target composition: MeaslesCIFComposition, source pid) {
  lm -> composition.section as section, section.title = "Contact Tracing" "set";
}  

group mapClinicalToObservations(source lm : SOTMeasles, target bundle: Bundle, target composition: Composition, source pid) {
  lm -> composition.section as section, section.title = "Clinical Data, Follow up and Treatment" then {
    lm.Clinical as clinical -> clinical then {
      clinical.Fever as fever -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        fever -> observation.id = obsid "setObsid";
        fever -> create('Coding') as coding, coding.code = "DE66", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Fever" then {  
        fever -> fever then createObservationResource(fever, coding, observation, pid) "setObs"; 
        clinical.FeverOnsetDate as onsetDate -> create('Period') as period, period.start = onsetDate, observation.effective = period "setStartDate";
        } "setObs";
      } "setFever";
      
      clinical.Temperature as temperature -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        temperature -> observation.id = obsid "setObsid";
        temperature -> create('Coding') as coding, coding.code = "DE70", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Temperature" then { 
        temperature -> temperature then createObservationResource(temperature, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setTemperature";

      clinical.Rash as rash where code != 'Yes' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        rash -> observation.id = obsid "setObsid";
        rash -> create('Coding') as coding, coding.code = "DE72", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Rash" then { 
        rash -> rash then createObservationResource(rash, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setRash";

      clinical.TypeOfRash as haemorrhagic where code = 'Haemorrhagic' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        haemorrhagic -> observation.id = obsid "setObsid";
        haemorrhagic -> create('Coding') as coding, coding.code = "Haemorrhagic", coding.system = "http://worldhealthorganization.github.io/smart-ot/RashType", coding.display = "Haemorrhagic" then { 
          haemorrhagic -> create('Coding') as ValueCoding, ValueCoding.code = "Yes" , ValueCoding.system = "http://ritikarawlani.github.io/smart-outbreak-measles/YesNoUnknown", ValueCoding.display= "Yes" then {
          haemorrhagic -> haemorrhagic then createObservationResource(ValueCoding, coding, observation, pid) "setObs"; 
          } "setValue";
       clinical.RashOnsetDate as onsetDate -> create('Period') as period, period.start = onsetDate, observation.effective = period "setStartDate";
        } "setObs";
      } "setHaemorrhagic";

      clinical.TypeOfRash as erythematous where code = 'Erythematous' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        erythematous -> observation.id = obsid "setObsid";
        erythematous -> create('Coding') as coding, coding.code = "Erythematous", coding.system = "http://worldhealthorganization.github.io/smart-ot/RashType", coding.display = "Erythematous" then { 
          erythematous -> create('Coding') as ValueCoding, ValueCoding.code = "Yes" , ValueCoding.system = "http://ritikarawlani.github.io/smart-outbreak-measles/YesNoUnknown", ValueCoding.display= "Yes" then {
          erythematous -> erythematous then createObservationResource(ValueCoding, coding, observation, pid) "setObs"; 
          } "setValue";
        clinical.RashOnsetDate as onsetDate -> create('Period') as period, period.start = onsetDate, observation.effective = period "setStartDate";
        } "setObs";
      } "setErythematous";

      clinical.TypeOfRash as vesicularPustular where code = 'VesicularPustular' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        vesicularPustular -> observation.id = obsid "setObsid";
        vesicularPustular -> create('Coding') as coding, coding.code = "Vesicular-pustular", coding.system = "http://worldhealthorganization.github.io/smart-ot/RashType", coding.display = "Vesicular Pustular" then { 
          vesicularPustular -> create('Coding') as ValueCoding, ValueCoding.code = "Yes" , ValueCoding.system = "http://ritikarawlani.github.io/smart-outbreak-measles/YesNoUnknown", ValueCoding.display= "Yes" then {
          vesicularPustular -> vesicularPustular then createObservationResource(ValueCoding, coding, observation, pid) "setObs"; 
          } "setValue";
        } "setObs";
       clinical.RashOnsetDate as onsetDate -> create('Period') as period, period.start = onsetDate, observation.effective = period "setStartDate";
      } "setVesicularPustular";

      clinical.TypeOfRash as petechialPurpuric where code = 'PetechialPurpuric' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        petechialPurpuric -> observation.id = obsid "setObsid";
        petechialPurpuric -> create('Coding') as coding, coding.code = "Petechial-purpuric", coding.system = "http://worldhealthorganization.github.io/smart-ot/RashType", coding.display = "Petechial Purpuric" then { 
          petechialPurpuric -> create('Coding') as ValueCoding, ValueCoding.code = "Yes" , ValueCoding.system = "http://ritikarawlani.github.io/smart-outbreak-measles/YesNoUnknown", ValueCoding.display= "Yes" then {
          petechialPurpuric -> petechialPurpuric then createObservationResource(petechialPurpuric, coding, observation, pid) "setObs"; 
          } "setValue";
        } "setObs";
       clinical.RashOnsetDate as onsetDate -> create('Period') as period, period.start = onsetDate, observation.effective = period "setStartDate";
      } "setPetechialPurpuric";

      clinical.TypeOfRash as other where code = 'Other' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        other -> observation.id = obsid "setObsid";
        other -> create('Coding') as coding, coding.code = "Other", coding.system = "http://worldhealthorganization.github.io/smart-ot/RashType", coding.display = "Rash" then { 
          other -> create('Coding') as ValueCoding, ValueCoding.code = "Yes" , ValueCoding.system = "http://ritikarawlani.github.io/smart-outbreak-measles/YesNoUnknown", ValueCoding.display= "Yes" then {
          other -> other then createObservationResource(ValueCoding, coding, observation, pid) "setObs"; 
          } "setValue";
        } "setObs";
      } "setOther";

      clinical.Cough as cough -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        cough -> observation.id = obsid "setObsid";
        cough -> create('Coding') as coding, coding.code = "DE84", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Cough" then { 
          cough -> cough then createObservationResource(cough, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setCough";

      clinical.Conjunctivitis as conjunctivitis -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        conjunctivitis -> observation.id = obsid "setObsid";
        conjunctivitis -> create('Coding') as coding, coding.code = "DE88", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Conjunctivitis" then { 
          conjunctivitis -> conjunctivitis then createObservationResource(conjunctivitis, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setConjunctivitis";

      clinical.Coryza as coryza -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        coryza -> observation.id = obsid "setObsid";
        coryza -> create('Coding') as coding, coding.code = "DE92", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Coryza" then { 
          coryza -> coryza then createObservationResource(coryza, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setCoryza";

      clinical.KoplikSpots as koplikSpots -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        koplikSpots -> observation.id = obsid "setObsid";
        koplikSpots -> create('Coding') as coding, coding.code = "DE96", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Koplik Spots" then { 
          koplikSpots -> koplikSpots then createObservationResource(koplikSpots, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setKoplikSpots";

      clinical.Lymphadenopathy as lymphadenopathy -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        lymphadenopathy -> observation.id = obsid "setObsid";
        lymphadenopathy -> create('Coding') as coding, coding.code = "DE100", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Lymphadenopathy" then { 
          lymphadenopathy -> lymphadenopathy then createObservationResource(lymphadenopathy, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setLymphadenopathy";

      clinical.JointPain as jointPain -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        jointPain -> observation.id = obsid "setObsid";
        jointPain -> create('Coding') as coding, coding.code = "DE104", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Joint Pain" then { 
          jointPain -> jointPain then createObservationResource(jointPain, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setJointPain";

      clinical.PregnancyStatus as pregnancy -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        pregnancy -> observation.id = obsid "setObsid";
        pregnancy -> create('Coding') as coding, coding.code = "DE108", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Pregnancy" then { 
          pregnancy -> pregnancy then createObservationResource(pregnancy, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setPregnancy";

      clinical.PregnancyStatus as pregnancy where code = 'Yes' -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
       pregnancy -> observation.id = obsid "setObsid";
       clinical.GestationWeeks as weeks -> create('Coding') as coding, coding.code = "DE112", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Weeks Pregnant" then { 
          weeks -> weeks then createObservationResource(weeks, coding, observation, pid) "setObs"; 
        } "setObs";
      } "setPregnancyWeeks";

      clinical.Outcome as outcome -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
       outcome -> observation.id = obsid "setObsid";
       outcome -> create('Coding') as coding, coding.code = "DE121", coding.system = "http://worldhealthorganization.github.io/smart-ot/PAHO_MRCIF", coding.display = "Outcome" then { 
          outcome -> outcome then createObservationResource(outcome, coding, observation, pid) "setObs"; 
        } "setObs";
       clinical.DateOfDeath as onsetDate -> observation.effective = onsetDate "setStartDate";
      } "setOutcome";
      clinical -> clinical then mapEncounters(clinical, bundle, section, pid) "setEncounter";
    } "setClinical";
  } "setSection";
}

group createObservationResource(source src, source coding: Coding, target observation : Observation, source pid) {
 src -> create('CodeableConcept') as code, code.Coding = coding, observation.code = code "setCode"; 
 src -> create('CodeableConcept') as value, value.Coding = src, observation.value = value "setValue";
 src -> observation.status  = "registered" "setStatus";
 src -> observation.subject as subject then {
 src -> subject.reference = append('Patient/',pid) "setSubject";
 } "setSubject";
} 

group mapLabsToDiagnosticReport(source lm : SOTMeasles, target bundle: Bundle, target composition: MeaslesCIFComposition, source pid) {
  lm -> composition.section as section, section.title = "Specimens & Laboratory Testing" then {
    lm.LaboratoryResults as labs -> uuid() as id, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', id), section.entry as sectionEntry, sectionEntry.reference = append('DiagnosticReport/', id), entry.resource = create('DiagnosticReport') as diagnosticReport then {
      labs -> diagnosticReport.id = id "setId";
      labs -> diagnosticReport.status = "registered" "setStatus";
      labs -> diagnosticReport.subject as subject, subject.reference = append('Patient/',pid) "setSubject";
      labs.Antigen as antigen -> diagnosticReport.code as code then mapCodingtoCodeableConcept(antigen,code) "setCode";
      labs -> uuid() as id, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', id), diagnosticReport.specimen as refSpecimen, refSpecimen.reference = append('Specimen/', id), entry.resource = create('Specimen') as specimen then {
        labs -> specimen.id = id "Setidn";
        labs.SpecimenCollectionDate as collectDate -> specimen.collection as collection, collection.collected = collectDate "setDate";
      //labs.SpecimenSentDate as sentDate -> 
        labs.SpecimenRecdDate as recdDate -> specimen.receivedTime = recdDate  "setDate";
        labs.SampleId as sampleId -> specimen.identifier as identifier, identifier.value = sampleId "setIdentifier";
        labs.SampleType as sampleType -> specimen.type = sampleType "setType";
//        labs.SpecimenNumber as number then {
//          number.display as text -> specimen.note as note, note.text = text "setNote" ;
//        } "setNote";
      } "setSpecimen";
      labs -> uuid() as id, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', id), diagnosticReport.performer as performer, performer.reference = append('Organization/', id), entry.resource = create('Organization') as perfOrg then {
        labs.LabName as labName -> perfOrg.name = labName "setName";
        labs -> perfOrg.id = id "setId" ;
      } "setPerformer";

      labs -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), diagnosticReport.result as result, result.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        labs -> observation.id = obsid "setObsid";
        labs.Antigen as antigen -> antigen then {
          labs.Results as result -> result then createObservationResource( result, antigen, observation, pid) "setObs"; 
          labs.LabResultsDate as resultDate -> observation.effective = resultDate "setStartDate";
        } "setAntigen";
      } "setResults";
      labs.Antigen as antigen -> diagnosticReport.code = antigen "setCode";
      labs.LabResultsDate as resultDate -> diagnosticReport.effective = resultDate "setDate";
/*
        labs.TypeOfTest as testType ->          
        labs.ViralGenotype as genotype ->  */
  } "set diagnosticReport" ;
 } "setSection";
}  

group createImmunizationResource (source vax : SOTMeaslesVaccinationStatus, target bundle : Bundle, target section : Element,  source pid) {
  vax -> uuid() as id, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', id), section.entry as sectionEntry, sectionEntry.reference = append('Immunization/', id), entry.resource = create('Immunization') as immunization then {
    vax -> immunization.id = id "setId";
    vax -> immunization.status = "completed" "setStatus";
    vax -> immunization.vaccineCode as code then {
      vax.VaccineType as vaccineType -> vaccineType then mapCodingtoCodeableConcept( vaccineType, code) "setCode";
    } "set";
    vax.Source as source -> immunization.reportOrigin as origin then {
      source -> source then mapCodingtoCodeableConcept(source, origin) "setReportOrigin";
    } "set";
    vax.LastDoseDate as date -> immunization.occurrence = date "setDate";
    vax.NumberOfDoses as doses then {
      doses.display as seriesDose -> immunization.protocolApplied as protocol, protocol.series = seriesDose "set";
    } "setDosenumber"; 
    vax -> immunization.patient as subject, subject.reference = append('Patient/',pid) "setSubject";
  } "ad";
}
group mapVaccinationStatusToImmunization(source lm : SOTMeasles, target bundle: Bundle, target composition: MeaslesCIFComposition, source pid) {
  lm -> composition.section as section, section.title = "Vaccination History" then {
   lm.VaccinationStatus as vax then {  
      vax.NumberOfDoses as doses where code = "99" -> doses then createImmunizationResource(vax,bundle,section, pid) "do";
      vax.NumberOfDoses as doses where code = "1" -> doses then {
        vax.LastDoseDate as date -> date then createImmunizationResource(vax,bundle,section, pid) "do1";
      } "set";
      vax.NumberOfDoses as doses where code = "2" then {
        doses ->  doses then createImmunizationResource(vax, bundle, section, pid) "do2";
        vax.LastDoseDate as date -> date then createImmunizationResource(vax,bundle,section,pid) "do";
      } "setDoses";
      vax.NumberOfDoses as doses where code = "3" then {
        vax -> doses then createImmunizationResource(vax,bundle,section,pid) "do";
        vax -> doses then createImmunizationResource(vax,bundle,section,pid) "do";
        vax.LastDoseDate as date -> date then createImmunizationResource(vax,bundle,section,pid) "do";
      } "setDoses";
      vax.NumberOfDoses as doses where code = "4" then {
        vax -> doses then createImmunizationResource(vax,bundle,section,pid) "do";
        vax -> doses then createImmunizationResource(vax,bundle,section,pid) "do";
        vax -> doses then createImmunizationResource(vax,bundle,section,pid) "do";
        vax.LastDoseDate as date -> date then createImmunizationResource(vax,bundle,section,pid) "do";
      } "setDoses"; 
 
    } "setStatus";
  } "setSection";
}


group LmToComposition(source lm : SOTMeasles, target composition : Composition, source cid, source pid, source prid, source oid, source eid) {
  cid -> composition.id = cid "setId";
  lm -> composition.status = "final" "setStatus";
  lm -> composition.title = "PAHO Measles Case Investigation Form" "setTitle";
  lm -> create('Coding') as coding, coding.code = "55751-2", coding.system = "http://loinc.org", coding.display = "Public health Case report", create('CodeableConcept') as code, code.Coding = coding,  composition.type = code "setType";
  lm.ReportingSource as reportingSource -> reportingSource then {
    reportingSource.DateReportedLocal as date -> composition.date = date "setDate";
  } "setDateReportedLocal";
  lm -> composition.subject as subject then {
    lm -> subject.reference= append('Patient/',pid) "setSubject";
  } "setSubject";
  lm -> composition.author as practitioner then {
    lm -> practitioner.reference = append('Practitioner/', prid) "setAuthorPractitioner";
  } "setAuthorPractitioner";
  lm -> composition.author as institution then {
    lm -> institution.reference = append('Organization/', oid) "setAuthorInstitution";
  } "setAuthorOrg";
  lm -> composition.encounter as encounter then {
    lm -> encounter.reference = append ('Encounter/', eid) "setEncounter";
  } "setEncounter";
}


group DemographicsToPatient(source demographics:SOTMeaslesDemographic , target patient: MeaslesPatient, source pid) {
 pid -> patient.id = pid "setPatientId";
 demographics.Name as sourceName -> patient.name as targetName then {
  sourceName -> sourceName then humanNameToHumanName(sourceName, targetName) "CopyName";
 } "SetName";
 demographics.DateOfBirth as dob -> patient.birthDate = dob "setDateOfBirth";
 demographics.Sex as sex -> patient.gender = sex "setSex";
 demographics.CountryOfBirth as cob -> patient.CountryOfBirth = cob "setCountryOfBirth";
 demographics.Landmark as landmark -> patient.extension as ext then {
  landmark -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Landmark' , ext.value = landmark "setLandmarkValue";
 } "setLandmark";
 demographics.Guardian as guardian -> patient.extension as ext then {
  guardian -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Guardian' , ext.value = guardian "setGuardianValue";
 } "setGuardian";

demographics.Telephone as sourcePhone -> patient.telecom as targetPhone then {
  sourcePhone -> sourcePhone then contactPointToContactPoint(sourcePhone, targetPhone) "CopyContact";
 } "SetContact";
 
 demographics.PlaceOfResidence as sourceAddress -> patient.address as targetAddress then {
  sourceAddress -> sourceAddress then addressToAddress(sourceAddress,targetAddress) "CopyAddress";
 } "setAddress";

 demographics.Occupation as occupation -> patient.extension as ext then {
  occupation -> ext.url ='http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Occupation', ext.value = occupation "setOccupationValue";
 } "setOccupation";
 demographics.WorkAddress as workAddress -> patient.extension as ext then {
 workAddress -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/WorkAddress', ext.value = workAddress "setWorkAddressValue";
 } "setWorkAddress";
}

group ReportingSourceToPractitioner (source reportingSource: SOTMeaslesReportingSource, target practitioner: Practitioner, source prid) {
prid -> practitioner.id = prid "setId";
reportingSource.ReportedBy as name -> practitioner.name as humanName, humanName.text = name "setName";
}

group ReportingSourceToOrganization (source reportingSource: SOTMeaslesReportingSource, target organization: Organization, source oid) {
oid -> organization.id = oid "setId";
reportingSource.HealthServiceName as name -> organization.name = name "setName";
reportingSource.HealthServiceTelephone as phoneSource -> organization.contact as contactDetails, contactDetails.telecom as phoneTarget then {
  phoneSource -> phoneSource then contactPointToContactPoint(phoneSource, phoneTarget) "setOrgContact"; 
} "setPhone";

reportingSource.PlaceOfReporting as locationSource -> organization.contact as contactDetails, contactDetails.address as locationTarget then {
  locationSource -> locationSource then contactPointToContactPoint(locationSource, locationTarget) "setOrgAddress"; 
} "setAddress";

}

group mapEncounters (source clinical : SOTMeaslesClinical, target bundle: Bundle, target section: Element, source pid) {
clinical.HistoryOfHospitalization where code = 'Yes' then {
  clinical.DateOfAdmission as date then {
    date -> create('Coding') as type, type.code = "IMP", type.system = "http://terminology.hl7.org/CodeSystem/v3-ActCode", type.display = "inpatient encounter" then createEncounterResource(date, bundle, section, pid, type) "create";
  } "d";
} "dff";
}

group createEncounterResource (source date, target bundle : Bundle, target section : Element,  source pid, source type: Coding ) {
  date -> uuid() as eid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', eid), section.entry as sectionEntry, sectionEntry.reference = append('Encounter/', eid), entry.resource = create('Encounter') as encounter then {
   date -> encounter.id = eid "setId";
   date -> encounter.status = "finished" "setStatus";
   pid -> encounter.subject as subject, subject.reference = append('Patient/',pid) "setSubject";
   date -> encounter.period as period, period.start = date "setDate";
   type -> encounter.class = type "setType";
  } "dssd";
}

group createCompositionEncounterResource (source date,  source pid, source type: Coding, source eid, target encounter : Encounter ) {
   date -> encounter.id = eid "setId";
   date -> encounter.status = "finished" "setStatus";
   pid -> encounter.subject as subject, subject.reference = append('Patient/',pid) "setSubject";
   date -> encounter.period as period, period.start = date "setDate";
   type -> encounter.class = type "setType";
}