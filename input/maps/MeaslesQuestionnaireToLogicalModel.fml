map "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesQuestionnaireToLogicalModel" = "MeaslesQuestionnaireToLogicalModel"


uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QuestionnaireResponse as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias SOTMeasles as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesReportingSource" alias SOTMeaslesReportingSource as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesDemographic" alias SOTMeaslesDemographic as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesVaccinationStatus" alias SOTMeaslesVaccinationStatus as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesClinical" alias SOTMeaslesClinical as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesLaboratoryResults" alias SOTMeaslesLaboratoryResults as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesContactTracing" alias SOTMeaslesContactTracing as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesEpiData" alias SOTMeaslesEpiData as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeaslesClassification" alias SOTMeaslesClassification as target



group MeaslesQuestionnaireToLogicalModel(source qr : QuestionnaireResponse, target measlesLm : SOTMeasles) {
  qr.item as item where linkId.value in ('investigationForm') -> measlesLm as measlesLm then mapInvestigationForm(item, measlesLm) "setInvestigationForm";
}

group mapInvestigationForm(source investigationForm, target measlesLm : SOTMeasles) {
  investigationForm.item as qrReportingSource where linkId.value in ('reportingSource') -> measlesLm.ReportingSource as lmReportingSource then mapReportingSource(qrReportingSource, lmReportingSource) "setReportingSource";
  investigationForm.item as qrDemographics where linkId.value in ('demographics') -> measlesLm.Demographics as lmDemographics then mapDemographics(qrDemographics, lmDemographics) "setDemographics";
  investigationForm.item as qrVaccinationStatus where linkId.value in ('vaccinationStatus') -> measlesLm.VaccinationStatus as lmVaccinationStatus then mapVaccinationStatus(qrVaccinationStatus, lmVaccinationStatus) "setVaccinationStatus";
  investigationForm.item as qrClinical where linkId.value in ('clinical') -> measlesLm.Clinical as lmClinical then mapClinical(qrClinical, lmClinical) "setClinical";
  investigationForm.item as qrLaboratoryResults where linkId.value in ('laboratoryResults') -> measlesLm.LaboratoryResults as lmLaboratoryResults then mapLaboratoryResults(qrLaboratoryResults, lmLaboratoryResults) "setLaboratoryResults";
  investigationForm.item as qrContactTracing where linkId.value in ('contactTracing') -> measlesLm.ContactTracing as lmContactTracing then mapContactTracing(qrContactTracing, lmContactTracing) "setContactTracing";
  investigationForm.item as qrEpiData where linkId.value in ('epiData') -> measlesLm.EpiData as lmEpiData then mapEpiData(qrEpiData, lmEpiData) "setEpiData";
  investigationForm.item as qrClassification where linkId.value in ('classification') -> measlesLm.Classification as lmClassification then mapClassification(qrClassification, lmClassification) "setClassification";

}


group mapReportingSource(source qrReportingSource, target lmReportingSource : SOTMeaslesReportingSource) {
  qrReportingSource.item as item then{
     item.answer first as initialDiagnosis where item.linkId = 'initialDiagnosis' then {
        initialDiagnosis.value as coding -> lmReportingSource.InitialDiagnosis = coding "setInitialDiagnosis";
      } "setInitialDiag";
  
      item.answer first as reportedBy where item.linkId = 'reportedBy' then {
          reportedBy.value as value -> lmReportingSource.ReportedBy = value "setCaseID";
      } "setCaseID";
      
      qrReportingSource.item as qrReportingInstitution where linkId.value in ('reportingInstitution') -> lmReportingSource as lmReportingSource then mapReportingInstitution(qrReportingInstitution, lmReportingSource) "setReportingInstitution";

      item.answer first as dateOfConsultation where item.linkId = 'DateOfConsultation' then {
          dateOfConsultation.value as value -> lmReportingSource.DateOfConsultation = value "setDateOfConsultation";
      } "setDateOfConsultation";
      
      item.answer first as dateOfHomeVisit where item.linkId = 'DateOfHomeVisit' then {
          dateOfHomeVisit.value as value -> lmReportingSource.DateOfHomeVisit = value "setDateOfHomeVisit";
      } "setDateOfHomeVisit";
      
      item.answer first as dateReportedLocal where item.linkId = 'dateReported' then {
          dateReportedLocal.value as value -> lmReportingSource.DateReportedLocal = value "setDateReportedLocal";
      } "setDateReportedLocal";
      
      item.answer first as dateReportedNational where item.linkId = 'DateReportedNational' then {
          dateReportedNational.value as value -> lmReportingSource.DateReportedNational = value "setDateReportedNational";
      } "setDateReportedNational";
      
      item.answer first as providerType where item.linkId = 'TypeOfProviderReporting' then {
          providerType.value as value -> lmReportingSource.TypeOfProviderReporting = value "setProviderType";
      } "setProviderType";
      
      item.answer first as detectedBy where item.linkId = 'DetectedBy' then {
          detectedBy.value as value -> lmReportingSource.DetectedBy = value "setDetectedBy";
      } "setDetectedBy";
  } "setReportingSource";
}

group mapReportingInstitution(source qrReportingInstitution, target lmReportingSource : SOTMeaslesReportingSource) {
  qrReportingInstitution.item as item then {
     item.answer first as reportingFacility where item.linkId = 'reportingFacility' then {
        reportingFacility.value as healthFacilityName -> lmReportingSource.HealthServiceName = healthFacilityName "setHealthFacilityName";
     } "setHealthFacilityName";
    
     item.answer first as telephone where item.linkId = 'telephone' then {
        telephone.value as value -> create('ContactPoint') as lmTelephone, lmTelephone.value = value, lmReportingSource.HealthServiceTelephone = lmTelephone "setTelephone";
     } "setTelephone";
    
     qrReportingInstitution -> create('Address') as lmAddress then {
      item.answer first as country where item.linkId = 'country' then {
        country.value as countryValue -> lmAddress.country = countryValue "setCountry";
      } "setCountry2"  ;
    
      item.answer first as municipality where item.linkId = 'municipality' then {
        municipality.value as cityValue -> lmAddress.city = cityValue "setCity";
      } "setCity";
    
      item.answer first as state where item.linkId = 'state' then {
        state.value as stateValue -> lmAddress.state = stateValue "setState";
      } "setState";
    
      item.answer first as locality where item.linkId = 'locality' then {
        locality.value as localityValue -> lmAddress.line = localityValue "setLocality";
      } "setLocality";  
    
      qrReportingInstitution -> lmReportingSource.PlaceOfReporting = lmAddress "assignAddress";
    
     } "setAddress";
  } "setReportingInstitution";
}


group mapDemographics(source qrDemographics, target lmDemographics : SOTMeaslesDemographic) {

    qrDemographics.item as item then {
    item.answer first as name where item.linkId = 'name' then {
        name.value as nameValue -> create('HumanName') as lmName, lmName.family = nameValue, lmDemographics.Name = lmName "setName";
    } "setName";
    
    item.answer first as guardian where item.linkId = 'guardian' then {
        guardian.value as value -> create('HumanName') as lmGuardian, lmGuardian.family = value, lmDemographics.Guardian = lmGuardian "setGuardian";
    } "setGuardian";
    
    item.answer first as address where item.linkId = 'address' then {
        address.value as value -> create('Address') as lmAddress, lmAddress.text = value, lmDemographics.PlaceOfResidence = lmAddress "setAddress";
    } "setAddress";
    
    item.answer first as telephone where item.linkId = 'telephone' then {
        telephone.value as value -> create('ContactPoint') as lmTelephone, lmTelephone.value = value, lmDemographics.Telephone = lmTelephone "setTelephone";
    } "setTelephone";
    
    item.answer first as landmark where item.linkId = 'landmark' then {
        landmark.value as value -> lmDemographics.Landmark = value "setLandmark";
    } "setLandmark";
    
    item.answer first as occupation where item.linkId = 'occupation' then {
        occupation.value as value -> lmDemographics.Occupation = value "setOccupation";
    } "setOccupation";
    
    item.answer first as location where item.linkId = 'location living in' then {
        location.value as value -> locationlmDemographics.LocalityType = value "setLocalityType";
    } "setLocalityType";
    
    item.answer first as workAddress where item.linkId = 'workAddress' then {
      workAddress.value as value ->  create('Address') as lmAddress, lmAddress.text = value, lmDemographics.WorkAddress = lmAddress "setWorkAddress";
    } "setWorkAddress";
    
    item.answer first as sex where item.linkId = 'sex' then {
      sex.value as value ->  lmDemographics.Sex = value "setSex";
    } "setSex";
    
    item.answer first as DoB where item.linkId = 'DoB' then {
      DoB.value as value -> lmDemographics.DateOfBirth = value "setDoB";
    } "setDoB";
    
    item.answer first as ageOnset where item.linkId = 'ageOnset' then {
      ageOnset.value as value ->  create('Quantity') as lmAgeOnset, lmAgeOnset.value = value, lmDemographics.Age = lmAgeOnset "setAgeOnset";
    } "setAgeOnset";
  } "setDemographics";

}

group mapVaccinationStatus(source qrVaccinationStatus, target lmVaccinationStatus: SOTMeaslesVaccinationStatus)
{
  qrVaccinationStatus.item as item then {
    item.answer first as lastDoseDate where item.linkId = 'lastDoseDate' then {
      lastDoseDate.value as value -> lmVaccinationStatus.LastDoseDate = value "setLastDoseDate";
    } "setLastDoseDate";
    item.answer first as sourceOfInformation where item.linkId = 'sourceOfInformation' then {
      sourceOfInformation.value as value -> lmVaccinationStatus.Source = value "setSourceOfVaccinationInformation";
    } "set";
    item.answer first as noOfDoses where item.linkId = 'noOfDoses' then {
      noOfDoses.value as value -> lmVaccinationStatus.NumberOfDoses = value "setNumberOfDoses";
    } "set";
    item.answer first as vaccineType where item.linkId = 'vaccineType' then {
      vaccineType.value as value -> lmVaccinationStatus.VaccineType = value "setVaccineType";
    } "set";
  } "set";
}

group mapClinical(source qrClinical, target lmClinical: SOTMeaslesClinical) {
  qrClinical.item as item then {
    item.answer first  as fever where item.linkId = 'fever' then {
      fever.value as value -> lmClinical.Fever = value "setFever";
    } "set";
    item.answer first  as temperature where item.linkId = 'temperature' then {
      temperature.value as value -> lmClinical.Temperature as temp, temp.value = value "setTemperature";
    } "set";
    item.answer first  as dateOfFeverOnset where item.linkId = 'dateOfFeverOnset' then {
      dateOfFeverOnset.value as value -> lmClinical.FeverOnsetDate = value "setDateOfFeverOnset";
    } "set";
    item.answer first  as rash where item.linkId = 'rash' then {
      rash.value as value -> lmClinical.Rash = value "setRash";
    } "set";
    item.answer first  as rashType where item.linkId = 'rashType' then {
      rashType.value as value -> lmClinical.TypeOfRash = value "setRashType";
    } "set";
    item.answer first  as rashDuration where item.linkId = 'rashDuration' then {
      rashDuration.value as value -> lmClinical.DurationOfRash = value "setRashDuration";
    } "set";
    item.answer first  as rashOnsetDate where item.linkId = 'rashOnsetDate' then {
      rashOnsetDate.value as value -> lmClinical.RashOnsetDate = value "setRashOnsetDate";
    } "set";
    item.answer first  as cough where item.linkId = 'cough' then {
      cough.value as value -> lmClinical.Cough = value "setCough";
    } "set";
    item.answer first  as conjunctivitis where item.linkId = 'conjunctivitis' then {
      conjunctivitis.value as value -> lmClinical.Conjunctivitis = value "setConjunctivitis";
    } "set";
    item.answer first  as coryza where item.linkId = 'coryza' then {
      coryza.value as value -> lmClinical.Coryza = value "setCoryza";
    } "set";
    item.answer first  as koplikSpots where item.linkId = 'koplikSpots' then {
      koplikSpots.value as value -> lmClinical.KoplikSpots = value "setKoplikSpots";
    } "set";
    item.answer first  as lymphadenopathy where item.linkId = 'lymphadenopathy' then {
      lymphadenopathy.value as value -> lmClinical.Lymphadenopathy = value "setLymphadenopathy";
      } "set";
    item.answer first  as jointPain where item.linkId = 'jointPain' then {
      jointPain.value as value -> lmClinical.JointPain = value "setArthralgia";
    } "set";
    item.answer first  as pregnancy where item.linkId = 'pregnancy' then {
     pregnancy.value as value -> lmClinical.PregnancyStatus = value "setPregnant";
    } "set";
    item.answer first  as monthsPregnant where item.linkId = 'monthsPregnant' then {
      monthsPregnant.value as value -> lmClinical.GestationWeeks as weeks, weeks.value = value "setPregnancyWeeks";
    } "set";
    item.answer first  as placeOfBirth where item.linkId = 'placeOfBirth' then {
      placeOfBirth.value as value -> lmClinical.IntentedBirthPlacce = value "setPlaceOfBirth";
    } "set";
    item.answer first  as admitted where item.linkId = 'admitted' then {
      admitted.value as value -> lmClinical.HistoryOfHospitalization = value "setHospitalized";
    } "set";
    item.answer first  as admittedHCFName where item.linkId = 'admittedHCFName' then {
      admittedHCFName.value as value -> lmClinical.HospitalName = value "setHospitalName";
    } "set";
    item.answer first  as admissionDate where item.linkId = 'admissionDate' then {
      admissionDate.value as value -> lmClinical.DateOfAdmission = value "setAdmissionDate";
    } "set";
    item.answer first  as hospitalRecordNumber where item.linkId = 'hospitalRecordNumber' then {
      hospitalRecordNumber.value as value -> lmClinical.HospitalRecordNumber = value "setHospitalRecordNumber";
    } "set";
    item.answer first  as outcome where item.linkId = 'outcome' then {
      outcome.value as value -> lmClinical.Outcome = value "setOutcome";
    } "set";
    item.answer first  as deathCause where item.linkId = 'primaryCauseOfDeath' then {
      deathCause.value as value -> lmClinical.primaryCauseOfDeath = value "setCause";
    } "set";
    item.answer first  as outcomeDate where item.linkId = 'outcomeDate' then {
      outcomeDate.value as value -> lmClinical.DateOfDeath = value "setDeathDate";
    } "set";
    item.answer first  as diseaseAdditionalInfo where item.linkId = 'diseaseAdditionalInfo' then {
      diseaseAdditionalInfo.value as value -> lmClinical.Comments = value "setComments";
    } "set"; 
  } "setClinical";
}

group mapLaboratoryResults(source qrLaboratoryResults, target lmLaboratoryResults: SOTMeaslesLaboratoryResults) {
  qrLaboratoryResults.item as item then {
  item.answer first as answer where  item.linkId = 'specimenNumber' then {
    answer.value as value -> lmLaboratoryResults.SpecimenNumber = value "setSpecimenNumber";
  } "set";
  item.answer first as answer where  item.linkId = 'sampleType' then {
    answer.value as value -> lmLaboratoryResults.SampleType = value "setSampleType";
  } "set";
  item.answer first as answer where  item.linkId = 'collectionDate' then {
    answer.value as value -> lmLaboratoryResults.SpecimenCollectionDate = value "setSpecimenCollectionDate";
  } "set";
  item.answer first as answer where  item.linkId = 'labName' then {
    answer.value as value -> lmLaboratoryResults.LabName = value "setShipmentDate";
  } "set";
  item.answer first as answer where  item.linkId = 'specimenSentDate' then {
    answer.value as value -> lmLaboratoryResults.SpecimenSentDate = value "setSpecimenSentDate";
  } "set";
  item.answer first as answer where  item.linkId = 'specimenReceivedDate' then {
    answer.value as value -> lmLaboratoryResults.SpecimenRecdDate = value "setSpecimenRecdDate";
  } "set"; 
  item.answer first as answer where  item.linkId = 'sampleId' then {
    answer.value as value -> lmLaboratoryResults.SampleId = value "setSampleId";
  } "set";
  item.answer first as answer where  item.linkId = 'testPerformed' then {
    answer.value as value -> lmLaboratoryResults.TypeOfTest = value "setTypeOfTest";
  } "set";
  item.answer first as answer where  item.linkId = 'antigen' then {
    answer.value as value -> lmLaboratoryResults.Antigen = value "setAntigen";
  } "set";
  item.answer first as answer where  item.linkId = 'result' then {
    answer.value as value -> lmLaboratoryResults.Results = value "setResults";
  } "set";
  item.answer first as answer where  item.linkId = 'resultDate' then {
    answer.value as value -> lmLaboratoryResults.LabResultsDate = value "setLabResultsDate";
  } "set";
  item.answer first as answer where  item.linkId = 'specifyVirus' then {
    answer.value as value -> lmLaboratoryResults.ViralGenotype = value "setSpecifyVirus";
  } "set";
} "setLabs";
}

group mapTravelDetails (source qrTravelDetails, target lmContactTracing : SOTMeaslesContactTracing) {
  qrTravelDetails.answer first as answer where  item.linkId = 'placeOfTravel' then {
    answer.value as value -> lmTravelDetails.placeOfTravel = value "setSpecifyVirus";
  } "set";
  qrTravelDetails.answer first as answer where  item.linkId = 'arrivalDate' then {
    answer.value as value -> lmTravelDetails.arrivalDate = value "setSpecifyVirus";
  } "set";
  qrTravelDetails.answer first as answer where  item.linkId = 'departureDate' then {
    answer.value as value -> lmTravelDetails.departureDate = value "setSpecifyVirus";
  } "set";
}

group mapContactTracing(source qrContactTracing, target lmContactTracing: SOTMeaslesContactTracing) {
  qrContactTracing.item as item then {
    item.answer first as answer where  item.linkId = 'caseSearchConducted' then {
      answer.value as value -> lmContactTracing.caseSearchConducted = value "setSpecifyVirus";
    } "set";
    item.answer first as answer where  item.linkId = 'noOfsuspectCases' then {
      answer.value as value -> lmContactTracing.noOfsuspectCases = value "setSpecifyVirus";
    } "set";
    item.answer first as answer where  item.linkId = 'pregnantContact' then {
      answer.value as value -> lmContactTracing.pregnantContact = value "setSpecifyVirus";
    } "set";
    item.answer first as answer where  item.linkId = 'pregnantContactNames' then {
      answer.value as value -> lmContactTracing.pregnantContactNames = value "setSpecifyVirus";
    } "set";
    item.answer first as answer where  item.linkId = 'localCasesPresent' then {
      answer.value as value -> lmContactTracing.localCasesPresent = value "setSpecifyVirus";
    } "set";
    item.answer first as answer where  item.linkId = 'travelledOutside' then {
      answer.value as value -> lmContactTracing.travelledOutside = value "setSpecifyVirus";
    } "set";
    item.answer first as qrTravelDetails where  item.linkId = 'travelDetails' -> create('http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTT1ExposureTravelHistory') as tgtTravelDetails then {
      qrTravelDetails -> qrTravelDetails then mapTravelDetails(qrTravelDetails, tgtTravelDetails) "d";
      qrTravelDetails -> lmContactTracing.travelDetails = tgtTravelDetails "set"; 
    } "set";
    item.answer first as answer where  item.linkId = 'infectionSetting' then {
      answer.value as value -> lmContactTracing.infectionSetting = value "setSpecifyVirus";
    } "set";
    item.answer first as answer where  item.linkId = 'specifyInfectionSetting' then {
      answer.value as value -> lmContactTracing.specifyInfectionSetting = value "setSpecifyVirus";
    } "set";
  } "setContactTracing";
}

group mapEpiData(source qrEpiData, target lmEpiData: SOTMeaslesEpiData) {
  qrEpiData.item as item then {
    item.answer first as answer where  item.linkId = 'ringVaccination' then {
    answer.value as value -> lmEpiData.ringVaccination = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'dateStarted' then {
    answer.value as value -> lmEpiData.dateStarted = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'dateEnded' then {
    answer.value as value -> lmEpiData.dateEnded = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'noOfDosesRingVaccination' then {
    answer.value as value -> lmEpiData.noOfDosesRingVaccination = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'rapidCoverageMonitioring' then {
    answer.value as value -> lmEpiData.rapidCoverageMonitioring = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'percentVaccinated' then {
    answer.value as value -> lmEpiData.percentVaccinated = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'contactTracingDone' then {
    answer.value as value -> lmEpiData.contactTracingDone = value "setFinalClassification";
    } "set";
    item.answer first as answer where  item.linkId = 'lastFollowUp' then {
    answer.value as value -> lmEpiData.lastFollowUp = value "setFinalClassification";
    } "set";
  } "setEpiData";
}

group mapClassification(source qrClassification, target lmClassification: SOTMeaslesClassification) {
  qrClassification.item as item then {
  item.answer first as answer where  item.linkId = 'finalClassification' then {
    answer.value as value -> lmClassification.FinalClassification = value "setFinalClassification";
    } "set";
  item.answer first as answer where  item.linkId = 'confirmationBasis' then {
    answer.value as value -> lmClassification.ConfirmationBasis = value "setConfirmationBasis";
    } "set";
  item.answer first as answer where  item.linkId = 'source' then {
    answer.value as value -> lmClassification.Source = value "setSource";
    } "set";
  item.answer first as answer where  item.linkId = 'countryImportation' then {
    answer.value as value -> lmClassification.CountryImportation = value "setCountryImportation";
    } "set";
  item.answer first as answer where  item.linkId = 'discardingBasis' then {
    answer.value as value -> lmClassification.DiscardingBasis = value "setDiscardingBasis";
    } "set";
  item.answer first as answer where  item.linkId = 'contact' then {
    answer.value as value -> lmClassification.Contact = value "setContact";
    } "set";
  item.answer first as answer where  item.linkId = 'contactCaseNo' then {
    answer.value as value -> lmClassification.ContactCaseNo = value "setContactCaseNo";
    } "set";
  item.answer first as answer where  item.linkId = 'classifiedBy' then {
    answer.value as value -> lmClassification.ClassifiedBy = value "setClassifiedBy";
    } "set";
  item.answer first as answer where  item.linkId = 'classificationDate' then {
    answer.value as value -> lmClassification.ClassificationDate = value "setClassificationDate";
    } "set";
} "setClassification";
}
